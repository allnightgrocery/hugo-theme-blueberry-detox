// -------------------------------------------------------------------------
// NOTES
// -------------------------------------------------------------------------


// The Pear grid pulls from the brilliant Semantic Grid System found here: http://semantic.gs/ and explained beautifully here: http://coding.smashingmagazine.com/2011/08/23/the-semantic-grid-system-page-layout-for-tomorrow/.

// How to use:

// 1. Customize $column-width, $gutter-width, $columns, and .container below.

// 2. Apply columns to each section in SCSS stylesheets, like this:

//             article { @include column(9); }
//             section { @include column(3); }

// 3. For "Nested Columns" refer to http://semantic.gs/ and keep in mind their example is in LESS, not SCSS.


// -------------------------------------------------------------------------
// MODIFY
// -------------------------------------------------------------------------


// Defaults which you can freely override. The default 65px column width and 20px gutter width makes a 1000px width grid. These numbers are automatically converted into percentages via the SCSS operations below when $total-width (also below) is set to 100%.
$column-width: 65;
$gutter-width: 20;
$columns: 12;


// $total-width is set to 100% for a fluid layout
$total-width: 100%;


// Container
.container {
    width: 90%;
	max-width: 800px;
	margin: auto;
}


// -------------------------------------------------------------------------
// UTILITIES
// -------------------------------------------------------------------------


// You shouldn't need to modify the UTILITIES code

// Utility variable
@function gridsystem-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * $columns);
}


// These two lines and the star-hack width/margin lines below enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
$min-width: 999999;
$correction: 0.5 / $min-width * 100;


// -------------------------------------------------------------------------
// MIXINS
// -------------------------------------------------------------------------


// You shouldn't need to modify the MIXINS code

// Columns
@mixin column($x,$columns:$columns) {
	display: inline;
	float: left;
	width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
	margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
	*width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
	*margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}


// Rows
@mixin row($columns:$columns) {
	display: block;
	width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
	margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
	*width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
	*margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
	@include clearfix();
}


// Push
@mixin push($offset:1) {
	margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}


// Pull
@mixin pull($offset:1) {
	margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}